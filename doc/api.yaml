openapi: 3.0.0

###############
## Meta info ##
###############
info:
  title: WASAPhotoAPI
  version: 1.0.0
  description: |-
    API for the WASAPhoto application. <br>
    The API follows the CRUD philosophy, that maps HTTP methods TK

tags:
  - name: Authorization
    description: |-
      Endpoints that require the user to be logged in.
      The user must provide his username in the `Authorization` header.
  - name: NoAuth
    description: |-
      Endpoints that don't require the user to be logged in.

###############
## Endpoints ##
###############
paths:

  /me/feed:
    patch:
      operationId: getMyStream
      summary: Returns a list of posts made by the users the current user is following
      tags: ['Authorization']
      responses:
        '200':
          $ref: '#/components/responses/MultiUserPost'
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'

  /me/change_username:
    post:
      operationId: setMyUserName
      summary: Changes the user's username
      tags: ['Authorization']
      description: |-
        Changes the user's username; if the username is already taken an error is returned.
        The previous username won't be reserved and it will be available for other users for the taking.
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  description: The new username
                  type: string
                  example: excale
                  pattern: '[\w\d_\-.]+'
                  minLength: 3
                  maxLength: 20
      responses:
        '200':
          description: Username changed correctly
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '403':
          description: The chosen username is already taken

  /me/followed_users:
    get:
      operationId: getFollowedUsers
      summary: Returns a list of users the current user is following
      tags: ['Authorization']
      responses:
        '200':
          description: List retrieved correctly
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: A username
                  example: excale
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '500':
          $ref: '#/components/responses/500-InternalError'

  /me/followed_users/{username}:
    put:
      operationId: followUser
      summary: Adds a specified user to the list of followed users.
      tags: ['Authorization']
      description: |-
        Adds a specified user to the list of followed users.
        If the specified user is already in the list,
        the response will be as if the specified user wasn't in the list before (i.e. 200).
      parameters:
        - $ref: '#/components/parameters/pathUsername'
      responses:
        '200':
          $ref: '#/components/responses/200-Success'
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'
    delete:
      operationId: unfollowUser
      summary: Removes a user from the list of followed users.
      tags: ['Authorization']
      description: |-
        Removes the specified user from the current user's list of followed users.
        If the specified user isn't in the list,
        the response will be as if the specified user has been removed correctly (i.e. 200).
      parameters:
        - $ref: '#/components/parameters/pathUsername'
      responses:
        '200':
          $ref: '#/components/responses/200-Success'
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'

  /me/banned_users:
    get:
      operationId: getBannedUsers
      summary: Returns a list of users the current user has banned
      tags: ['Authorization']
      responses:
        '200':
          description: List retrieved correctly
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: A username
                  example: excale
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '500':
          $ref: '#/components/responses/500-InternalError'

  /me/banned_users/{username}:
    put:
      operationId: banUser
      summary: Bans a user from seeing the current user's content.
      tags: ['Authorization']
      description: |-
        Adds the specified user to the current user's list of banned users.
      parameters:
        - $ref: '#/components/parameters/pathUsername'
      responses:
        '200':
          $ref: '#/components/responses/200-Success'
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'
    delete:
      operationId: unbanUser
      summary: Removes a user from the list of banned users.
      tags: ['Authorization']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
      description: |-
        Removes the specified user from the list of followed users.
        If the specified user doesn't belong to the list,
        the response will be as if the specified user would have been removed correctly (i.e. 200).
      responses:
        '200':
          $ref: '#/components/responses/200-Success'
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'

  /users/{username}:
    get:
      operationId: getUserProfile
      summary: Returns the details about a user's profile
      tags: ['NoAuth']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
      responses:
        '200':
          description: Information retrieved correctly
          content:
            application/json:
              schema:
                type: object
                properties:
                  displayName:
                    type: string
                    description: The user's display name
                    example: Emanuele Scaccia
                  username:
                    type: string
                    description: The user's username
                    example: excale
                  followers:
                    type: number
                    description: The number of followers the user has
                    example: 1450
                  following:
                    type: number
                    description: The number of users the user is following
                    example: 12
                  postsNumber:
                    type: number
                    description: The number of posts the user has
                    example: 3
                  profilePicture:
                    type: string
                    description: The URL of the user's profile picture
                    example: https://api.example.com/v1/users/excale/profile-picture
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'

  /users/{username}/feed:
    get:
      operationId: getUserFeed
      summary: Returns a list of posts made by the user
      tags: ['NoAuth']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
      responses:
        '200':
          $ref: '#/components/responses/MultiUserPost'
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'

  /users/{username}/feed/{post_id}:
    get:
      operationId: getUserPost
      summary: Returns details about a single post made by the user
      tags: ['NoAuth']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
        - $ref: '#/components/parameters/pathPostId'
      responses:
        '200':
          $ref: '#/components/responses/MonoUserPost'
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'

  /users/{username}/feed/{post_id}/likes:
    get:
      operationId: getUserPostLikes
      summary: Returns a list of users who liked the post
      tags: ['NoAuth']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
        - $ref: '#/components/parameters/pathPostId'
      responses:
        '200':
          description: List of users who liked the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameList'
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'
    put:
      operationId: addUserPostLike
      summary: Adds a like to the specified post
      tags: ['Authorization']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
        - $ref: '#/components/parameters/pathPostId'
      responses:
        '200':
          description: Like added correctly
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'
    delete:
      operationId: removeUserPostLike
      summary: Remove a like to the specified post
      tags: ['Authorization']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
        - $ref: '#/components/parameters/pathPostId'
      responses:
        '200':
          description: Like removed correctly
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'

  /users/{username}/feed/{post_id}/comments:
    get:
      operationId: getUserPostComments
      summary: Returns a list of comments under a post
      tags: ['NoAuth']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
        - $ref: '#/components/parameters/pathPostId'
      responses:
        '200':
          description: List of comments under the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPostComment'
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'
    put:
      operationId: addUserPostLike
      summary: Adds a like to the specified post
      tags: ['Authorization']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
        - $ref: '#/components/parameters/pathPostId'
      responses:
        '200':
          description: Like added correctly
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'
    delete:
      operationId: removeUserPostLike
      summary: Remove a like to the specified post
      tags: ['Authorization']
      parameters:
        - $ref: '#/components/parameters/pathUsername'
        - $ref: '#/components/parameters/pathPostId'
      responses:
        '200':
          description: Like removed correctly
        '400':
          $ref: '#/components/responses/400-InvalidRequest'
        '401':
          $ref: '#/components/responses/401-LoggedOut'
        '403':
          $ref: '#/components/responses/403-ForbiddenBanned'
        '404':
          $ref: '#/components/responses/404-ResourceNotFound'
        '500':
          $ref: '#/components/responses/500-InternalError'

  /login:
    post:
      tags: [ "NoAuth" ]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Excale
                  pattern: '[a-zA-Z0-9_\-.]'
                  minLength: 3
                  maxLength: 20
      responses:
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "Excale"

components:

  ##########################
  ## Parameter components ##
  ##########################
  parameters:

    pathUsername:
      name: username
      in: path
      required: true
      description: Username of the target user
      example: excale

    pathPostId:
      name: post_id
      in: path
      required: true
      description: ID of the target post
      example: 9a6a4415-9a50-4065-b345-8c22e8bb8c5f

  #######################
  ## Schema components ##
  #######################
  schemas:

    UsernameList:
      type: array
      description: A list of usernames
      items:
        type: string
        description: A username
        example: excale

    UserProfile:
      type: object
      properties:
        username:
          type: string
          description: The user's username.
          nullable: false
          example: excale
        displayName:
          type: string
          description: The user's display name.
          nullable: false
          example: Emanuele Scaccia
        urlProfilePicture:
          type: string
          description: |-
            URL of the user's profile picture.
            Note: all photos are encoded with webp format.
            Generally, the url will be of the form
            `https://api.example.com/v1/users/{username}/assets/{photo_id}.webp`
          nullable: false
          example: https://api.example.com/v1/users/excale/assets/3e270f31-6eaa-4418-ab97-7ed22f51d446.webp
        nPosts:
          type: number
          description: The number of posts the user has
          nullable: false
          minimum: 0
          example: 4
        nFollowers:
          type: number
          description: The number of followers the user has
          nullable: false
          minimum: 0
          example: 123
        nFollowing:
          type: number
          description: The number of users the user is following
          nullable: false
          minimum: 0
          example: 1234

    UserPost:
      type: object
      properties:
        id:
          type: string
          description: The uuid of the post.
          nullable: false
          example: 3e270f31-6eaa-4418-ab97-7ed22f51d446
        username:
          type: string
          description: The username of the user who made the post.
          nullable: false
          example: excale
        urlPhoto:
          type: string
          description: |-
            The URL of the photo. Note: all photos are encoded with webp format.
            Generally, the url will be of the form
            `https://api.example.com/v1/users/{username}/assets/{post_id}.webp`
          nullable: false
          example: https://api.example.com/v1/users/excale/assets/3e270f31-6eaa-4418-ab97-7ed22f51d446.webp
        caption:
          type: string
          description: The caption of the post.
          nullable: true
          example: A day at the beach...
        nLikes:
          type: integer
          description: The number of likes the post has.
          example: 123
          minimum: 0
          nullable: false
        nComments:
          type: integer
          description: The number of comments the post has.
          example: 4
          minimum: 0
          nullable: false
        timestamp:
          type: string
          description: The timestamp of the post, in `YYYY-MM-DD hh:mm:ss` format.
          nullable: false
          example: 2021-01-01T00:00:00.000Z

    UserPostComment:
      type: object
      properties:
        id:
          type: string
          description: The uuid of the comment.
          nullable: false
          example: 3e270f31-6eaa-4418-ab97-7ed22f51d446
        username:
          type: string
          description: The username of the user who added the comment.
          nullable: false
          example: excale
        text:
          type: string
          description: The text of the comment.
          nullable: false
          example: Nice photo!
        timestamp:
          type: string
          description: The timestamp of the comment, in `YYYY-MM-DD hh:mm:ss` format.
          nullable: false
          example: 2021-01-01T00:00:00.000Z

    ResourceNotFoundException:
      type: object
      properties:
        message:
          type: string
          description: The message of the error.
          nullable: true
          example: Couldn't find a user with the username 'excale'.
        resourceType:
          type: string
          description: The type of the resource that doesn't exist.
          enum: ["USER", "POST", "COMMENT"]
          nullable: false
          example: user

  #########################
  ## Response components ##
  #########################
  responses:

    MonoUserPost:
      description: A post made by a user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPost'

    MultiUserPost:
      description: A list of posts made by one or more users.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserPost'

    MonoComment:
      description: A comment made by a user under a post.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPost'

    MultiComment:
      description: A list of comments made by one or more users under a post.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserPost'

    200-Success:
      description: The operation was successful.

    400-InvalidRequest:
      description: The request was invalid or malformed (e.g. missing parameter).

    401-LoggedOut:
      description: The user is not logged in.

    403-Forbidden:
      description: The user is not allowed to perform the operation.

    403-ForbiddenBanned:
      description: The user has been banned by the specified user.

    404-ResourceNotFound:
      description: The specified user doesn't exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'

    500-InternalError:
      description: An internal error occurred.
