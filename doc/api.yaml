openapi: 3.0.3

###############
## Meta info ##
###############
info:
  title: WASAPhotoAPI
  version: 1.0.0
  description: |-
    API for the WASAPhoto application. <br>
    The API follows the CRUD philosophy, that maps HTTP methods TK
  contact:
    name: Emanuele Scaccia
    email: scaccia.2006749@studenti.uniroma1.it
    url: https://github.com/dev_excale/WASAPhoto

servers:
  - url: /

tags:
  - name: Misc
    description: |-
      Endpoints that deal with miscellaneous operations.
      No security is required to access these endpoints.
  - name: User
    description: |-
      Endpoints that deal with user-related operations.
      A bearer token is required to access these endpoints.
  - name: Post
    description: |-
      Endpoints that deal with post-related operations.
      A bearer token is required to access these endpoints.
  - name: Comment
    description: |-
      Endpoints that deal with comment-related operations.
      A bearer token is required to access these endpoints.
  - name: Like
    description: |-
      Endpoints that deal with like-related operations.
      A bearer token is required to access these endpoints.
  - name: Follow
    description: |-
      Endpoints that deal with follow-related operations.
      A bearer token is required to access these endpoints.
  - name: Ban
    description: |-
      Endpoints that deal with ban-related operations.
      A bearer token is required to access these endpoints.
  - name: Session
    description: |-
      Endpoints that deal with session-related operations.

###############
## Endpoints ##
###############
paths:

  /status:
    get:
      operationId: getStatus
      summary: API status
      description: Returns the status of the API.
      tags: [ 'Misc' ]
      responses:
        '200': # OK
          description: The API is up and running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

  /me/feed/:
    get:
      operationId: getMyStream
      summary: Posts by the followed users
      description: Returns a list of posts made by the users the current user is following.
      tags: [ 'Post' ]
      security:
        - Bearer: [ ]
      responses:
        '200': # OK
          $ref: '#/components/responses/200-PostList'
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'
    put:
      operationId: uploadPhoto
      summary: Add a post
      description: Uploads a new post to the user's feed.
      tags: [ 'Post' ]
      security:
        - Bearer: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The webp image file to upload.
                  nullable: false
                json:
                  type: object
                  description: Information regarding the post
                  nullable: true
                  properties:
                    caption:
                      type: string
                      minLength: 0
                      maxLength: 600
                      pattern: '.*'
                      description: The caption of the post.
                      example: Working on this new project!
                      nullable: true
      responses:
        '201': # Created
          $ref: '#/components/responses/201-Post'
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'


  /me/feed/{post_uuid}:
    parameters:
      - $ref: '#/components/parameters/pathPostUUID'
    delete:
      operationId: deletePhoto
      summary: Remove a post
      description: Removes a post from the user's feed.
      tags: [ 'Post' ]
      security:
        - Bearer: [ ]
      responses:
        '204': # No Content
          description: Post removed correctly
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '404': # Not Found
          $ref: '#/components/responses/404-PostNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /me/username:
    patch:
      operationId: setMyUserName
      summary: Update the user's username
      description: |-
        Update the user's username; if the username is already taken an error is returned.
        The previous username won't be reserved and it will be available to other users for the taking.
      tags: [ 'User' ]
      security:
        - Bearer: [ ]
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  $ref: '#/components/schemas/Username'
      responses:
        '204': # No Content
          description: Username changed correctly
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '409': # Conflict
          description: The chosen username is already taken
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /me/followed_users/:
    get:
      operationId: getFollowedUsers
      summary: Get followed users
      description: Returns the list of users the current user is following.
      tags: [ 'Follow' ]
      security:
        - Bearer: [ ]
      responses:
        '200': # OK
          $ref: '#/components/responses/200-UserList'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /me/followed_users/{user_uuid}:
    parameters:
      - $ref: '#/components/parameters/pathUserUUID'
    put:
      operationId: followUser
      summary: Follow a user
      description: |-
        Adds a specified user to the list of followed users.
        If the given user is already in the list,
        the response will be as if the user wasn't in the list before (i.e. 200).
      tags: [ 'Follow' ]
      security:
        - Bearer: [ ]
      responses:
        '204': # No Content
          description: User followed correctly
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-UserNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'
    delete:
      operationId: unfollowUser
      summary: Unfollow a user
      tags: [ 'Follow' ]
      security:
        - Bearer: [ ]
      description: |-
        Removes the specified user from the current user's list of followed users.
        If the user doesn't belong to the list,
        the response will be as if the user has been removed correctly (i.e. 200).
      responses:
        '204': # No Content
          description: User unfollowed correctly
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '404': # Not Found
          $ref: '#/components/responses/404-UserNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /me/banned_users/:
    get:
      operationId: getBannedUsers
      summary: Get banned users
      description: Returns the list of users the current user has banned
      tags: [ 'Ban' ]
      security:
        - Bearer: [ ]
      responses:
        '200': # OK
          $ref: '#/components/responses/200-UserList'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /me/banned_users/{user_uuid}:
    parameters:
      - $ref: '#/components/parameters/pathUserUUID'
    put:
      operationId: banUser
      summary: Ban a user
      description: |-
        Adds the given user to the current user's list of banned users.
        The banned user won't be able to see the user's content.
      tags: [ 'Ban' ]
      security:
        - Bearer: [ ]
      responses:
        '204': # No Content
          description: User banned correctly
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '404': # Not Found
          $ref: '#/components/responses/404-UserNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'
    delete:
      operationId: unbanUser
      summary: Unban a user
      description: |-
        Removes the given user from the list of banned users.
        If the user doesn't belong to the list,
        the response will be as if the user would have been removed correctly (i.e. 200).
      tags: [ 'Ban' ]
      security:
        - Bearer: [ ]
      responses:
        '204': # No Content
          description: User unbanned correctly
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '404': # Not Found
          $ref: '#/components/responses/404-UserNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /users/:
    get:
      operationId: findUser
      summary: Get users by username
      description: Returns the list of users whose username matches the given substring.
      tags: [ 'User' ]
      security:
        - Bearer: [ ]
      parameters:
        - name: username
          in: query
          required: true
          description: The substring to search for in the username.
          example: exc
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200': # OK
          $ref: '#/components/responses/200-UserList'
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /users/{user_uuid}:
    parameters:
      - $ref: '#/components/parameters/pathUserUUID'
    get:
      operationId: getUserProfile
      summary: Get user profile
      description: Returns the profile of the given user.
      tags: [ 'User' ]
      security:
        - Bearer: [ ]
      responses:
        '200': # OK
          $ref: '#/components/responses/200-User'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-UserNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /users/{user_uuid}/feed/:
    get:
      operationId: getUserFeed
      summary: Get all user's posts
      description: Returns the list of the posts made by the given user.
      tags: [ 'Post' ]
      security:
        - Bearer: [ ]
      responses:
        '200': # OK
          $ref: '#/components/responses/200-PostList'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-UserNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /users/{user_uuid}/feed/{post_uuid}:
    parameters:
      - $ref: '#/components/parameters/pathUserUUID'
      - $ref: '#/components/parameters/pathPostUUID'
    get:
      operationId: getPhoto
      summary: Get a user's post
      description: Returns a given post made by the given user.
      tags: [ 'Post' ]
      security:
        - Bearer: [ ]
      responses:
        '200': # OK
          $ref: '#/components/responses/200-Post'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-PostNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /users/{user_uuid}/feed/{post_uuid}/webp:
    parameters:
      - $ref: '#/components/parameters/pathUserUUID'
      - $ref: '#/components/parameters/pathPostUUID'
    get:
      operationId: getPhotoImage
      summary: Get a post's image
      description: Returns the webp image file of the given post.
      tags: [ 'Post' ]
      security:
        - Bearer: [ ]
      responses:
        '200': # OK
          $ref: '#/components/responses/200-Image'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-PostNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /users/{user_uuid}/feed/{post_uuid}/likes/:
    parameters:
      - $ref: '#/components/parameters/pathUserUUID'
      - $ref: '#/components/parameters/pathPostUUID'
    get:
      operationId: getLikes
      summary: Get users who liked a post
      description: Returns the list of users who liked the given post.
      tags: [ 'Like' ]
      security:
        - Bearer: [ ]
      responses:
        '200': # OK
          $ref: '#/components/responses/200-UserList'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-PostNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'
    put:
      operationId: likePhoto
      summary: Like a post
      description: Adds a like to the given post.
      tags: [ 'Like' ]
      security:
        - Bearer: [ ]
      responses:
        '204': # No Content
          description: Like added correctly
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-PostNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'
    delete:
      operationId: unlikePhoto
      summary: Remove the like from a post
      description: Removes the user's like from the given post.
      tags: [ 'Like' ]
      security:
        - Bearer: [ ]
      responses:
        '204': # No Content
          description: Like removed correctly
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-PostNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /users/{user_uuid}/feed/{post_uuid}/comments/:
    parameters:
      - $ref: '#/components/parameters/pathUserUUID'
      - $ref: '#/components/parameters/pathPostUUID'
    get:
      operationId: getComments
      summary: Get a post's comments
      description: Returns the list of comments made under the given post.
      tags: [ 'Comment' ]
      security:
        - Bearer: [ ]
      responses:
        '200': # OK
          $ref: '#/components/responses/200-CommentList'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-PostNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'
    put:
      operationId: commentPhoto
      summary: Comment a post
      description: Adds a comment to the given post.
      tags: [ 'Comment' ]
      security:
        - Bearer: [ ]
      responses:
        '201': # Created
          $ref: '#/components/responses/201-Comment'
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-PostNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /users/{user_uuid}/feed/{post_uuid}/comments/{comment_uuid}:
    parameters:
      - $ref: '#/components/parameters/pathUserUUID'
      - $ref: '#/components/parameters/pathPostUUID'
      - $ref: '#/components/parameters/pathCommentUUID'
    delete:
      operationId: uncommentPhoto
      summary: Remove a comment
      description: Removes the given comment from the given post.
      tags: [ 'Comment' ]
      security:
        - Bearer: [ ]
      responses:
        '204': # No Content
          description: Comment removed correctly
        '400': # Bad Request
          $ref: '#/components/responses/400-BadRequest'
        '401': # Unauthorized
          $ref: '#/components/responses/401-Unauthorized'
        '403': # Forbidden
          $ref: '#/components/responses/403-Banned'
        '404': # Not Found
          $ref: '#/components/responses/404-CommentNotFound'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

  /session:
    post:
      operationId: doLogin
      summary: Logs in the user
      description: |
        Returns the session token for the user with the provided username.
        If the user does not exist, it will be created automatically.
      tags: [ 'Session' ]
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  $ref: '#/components/schemas/Username'
      responses:
        '201': # Created
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    minLength: 16
                    maxLength: 80
                    description: The session token
                    pattern: '[a-zA-Z0-9+/]+={,2}'
        '500': # Internal Error
          $ref: '#/components/responses/500-InternalError'

################
## Components ##
################
components:

  ##########################
  ## Security components ##
  ##########################
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer

  ##########################
  ## Parameter components ##
  ##########################
  parameters:

    pathUserUUID:
      name: user_uuid
      in: path
      required: true
      description: UUID of the target user
      example: 9a6a4415-9a50-4065-b345-8c22e8bb8c5f
      schema:
        $ref: '#/components/schemas/UUID'

    pathPostUUID:
      name: post_uuid
      in: path
      required: true
      description: UUID of the target post
      example: 9a6a4415-9a50-4065-b345-8c22e8bb8c5f
      schema:
        $ref: '#/components/schemas/UUID'

    pathCommentUUID:
      name: comment_uuid
      in: path
      required: true
      description: UUID of the target comment
      example: 9a6a4415-9a50-4065-b345-8c22e8bb8c5f
      schema:
        $ref: '#/components/schemas/UUID'

  #######################
  ## Schema components ##
  #######################
  schemas:

    Status:
      type: object
      description: The status of the API
      properties:
        name:
          type: string
          description: The name of the API
          example: WasaPhoto
          pattern: 'WasaPhoto'
          minLength: 9
          maxLength: 9
        version:
          type: string
          description: The version of the API
          example: 1.0.0
          pattern: '\d+\.\d+.\d+'
          minLength: 5
          maxLength: 20
        status:
          type: string
          description: The status of the API
          example: Running
          pattern: '\w+'
          minLength: 2
          maxLength: 100

    UUID:
      type: string
      description: A UUID
      example: 9a6a4415-9a50-4065-b345-8c22e8bb8c5f
      format: uuid

    Username:
      type: string
      description: A user's username
      example: excale
      pattern: '[\w\-.]+'
      minLength: 3
      maxLength: 20

    User:
      type: object
      description: Information about a user
      properties:
        username:
          $ref: '#/components/schemas/Username'
        display_name:
          type: string
          description: The user's display name.
          example: Emanuele Scaccia
        url_profile_picture:
          type: string
          nullable: true
          description: |-
            URL of the user's profile picture.
            Note: all photos are encoded with webp format.
            Generally, the url will be of the form
            `/users/{user_uuid}/feed/{post_uuid}/webp`
          example: /users/0ff6f09c-c701-4b1c-ad15-86cf3d7d51a3/feed/3e270f31-6eaa-4418-ab97-7ed22f51d446/webp
          minLength: 0
          maxLength: 2147483647
        num_posts:
          type: number
          description: The number of posts the user has
          minimum: 0
          example: 4
        num_followers:
          type: number
          description: The number of followers the user has
          minimum: 0
          example: 123
        num_following:
          type: number
          description: The number of users the user is following
          minimum: 0
          example: 1234

    UserList:
      type: array
      description: A list of users
      minItems: 0
      maxItems: 2147483647
      items:
        $ref: '#/components/schemas/User'

    Post:
      type: object
      description: Information about a post
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        username:
          type: string
          description: The username of the user who made the post.
          example: excale
        url_photo:
          type: string
          description: |-
            The URL of the photo. Note: all photos are encoded with webp format.
            Generally, the url will be of the form
            `https://api.example.com/v1/users/{username}/assets/{post_id}.webp`
          example: https://api.example.com/v1/users/excale/assets/3e270f31-6eaa-4418-ab97-7ed22f51d446.webp
        caption:
          type: string
          nullable: true
          description: The caption of the post.
          example: A day at the beach...
        num_likes:
          type: integer
          description: The number of likes the post has.
          example: 123
          minimum: 0
        num_comments:
          type: integer
          description: The number of comments the post has.
          example: 4
          minimum: 0
        timestamp:
          type: string
          description: The timestamp of the post, in `YYYY-MM-DD hh:mm:ss` format.
          example: 2021-01-01T00:00:00.000Z

    PostList:
      type: array
      description: A list of posts
      minItems: 0
      maxItems: 2147483647
      items:
        $ref: '#/components/schemas/Post'

    Comment:
      type: object
      description: Information about a comment
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        username:
          type: string
          description: The username of the user who added the comment.
          example: excale
        text:
          type: string
          description: The text of the comment.
          example: Nice photo!
        timestamp:
          type: string
          description: The timestamp of the comment, in `YYYY-MM-DD hh:mm:ss` format.
          example: 2021-01-01T00:00:00.000Z

    CommentList:
      type: array
      description: A list of comments
      minItems: 0
      maxItems: 2147483647
      items:
        $ref: '#/components/schemas/Comment'

    Image:
      type: string
      format: binary
      description: The webp image file

  #########################
  ## Response components ##
  #########################
  responses:

    200-User:
      description: User retrieved correctly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    200-UserList:
      description: List retrieved correctly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserList'

    200-Post:
      description: Post retrieved correctly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'

    200-Image:
      description: Image retrieved correctly.
      content:
        image/webp:
          schema:
            $ref: '#/components/schemas/Image'

    200-PostList:
      description: List retrieved correctly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostList'

    200-CommentList:
      description: List retrieved correctly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentList'

    201-Post:
      description: Post created correctly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'

    201-Comment:
      description: Comment created correctly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'

    200-Success:
      description: The operation was successful.

    400-BadRequest:
      description: The request was invalid or malformed (e.g. missing parameter).

    401-Unauthorized:
      description: The user is not logged in.

    403-Forbidden:
      description: The user is not allowed to perform the operation.

    403-Banned:
      description: The user has been banned by the given user.

    404-UserNotFound:
      description: The specified user doesn't exist.

    404-PostNotFound:
      description: The specified post doesn't exist.

    404-CommentNotFound:
      description: The specified comment doesn't exist.

    409-Conflict:
      description: The operation couldn't be completed due to a conflict.

    500-InternalError:
      description: An internal error occurred.
